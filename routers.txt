//router auth

import { Router } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';
import {
  PASSWORD_HASH_SALT_ROUNDS,
  JWT_ACCESS_TOKEN_SECRET,
  JWT_ACCESS_TOKEN_EXPIRES_IN,
} from '../../constants/security.constant.js';

const prisma = new PrismaClient();
const authRouter = Router();

// 회원가입
authRouter.post('/signup', async (req, res) => {
  try {
    const { email, password, passwordconfirm, name } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        message: '이메일 입력이 필요합니다.',
      });
    }

    if (!password) {
      return res.status(400).json({
        success: false,
        message: '비밀번호 입력이 필요합니다.',
      });
    }

    if (!passwordconfirm) {
      return res.status(400).json({
        success: false,
        message: '비밀번호 확인 입력이 필요합니다.',
      });
    }

    if (!name) {
      return res.status(400).json({
        success: false,
        message: '이름 입력이 필요합니다.',
      });
    }

    if (password !== passwordconfirm) {
      return res.status(400).json({
        success: false,
        message: '입력한 비밀번호가 서로 일치하지 않습니다.',
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: '비밀번호는 최소 6자리 이상 입력해야합니다.',
      });
    }

    let emailValidationRegex = new RegExp('[a-z0-9._]+@[a-z]+.[a-z]{2,3}');
    const isValidEmail = emailValidationRegex.test(email);
    if (!isValidEmail) {
      return res.status(400).json({
        success: false,
        message: '올바른 이메일 형식이 아닙니다.',
      });
    }

    const existUser = await prisma.users.findUnique({ where: { email } });
    if (existUser) {
      return res.status(400).json({
        success: false,
        message: '이미 가입 된 이메일입니다.',
      });
    }

    const hashedPassword = bcrypt.hashSync(password, PASSWORD_HASH_SALT_ROUNDS);

    const newUser = await prisma.users.create({
      data: { email, password: hashedPassword, name },
    });

    delete newUser.password;

    // console.log({ newUser: newUser.toJSON() });

    return res.status(201).json({
      success: true,
      massage: '회원가입에 성공했습니다.',
      data: newUser,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      massage: '예상치 못한 에러가 발생했습니다. 관리자에게 문의하세요.',
    });
  }
});

// 로그인
authRouter.post('/signin', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        message: '이메일 입력이 필요합니다.',
      });
    }

    if (!password) {
      return res.status(400).json({
        success: false,
        message: '비밀번호 입력이 필요합니다.',
      });
    }

    const user = await prisma.users.findUnique({ where: { email } });
    const hashedPassword = user?.password;
    const isPasswordMatched = bcrypt.compareSync(password, hashedPassword);

    const isCorrectUser = user && isPasswordMatched;
    if (!isCorrectUser) {
      return res.status(401).json({
        success: false,
        message: '일치하는 인증 정보가 없습니다.',
      });
    }

    const accessToken = jwt.sign({ userId: user.id }, JWT_ACCESS_TOKEN_SECRET, {
      expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN,
    });

    return res.status(200).json({
      success: true,
      massage: '로그인에 성공했습니다.',
      data: { accessToken },
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      massage: '예상치 못한 에러가 발생했습니다. 관리자에게 문의하세요.',
    });
  }
});

export { authRouter };

----
//products router
import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { needSignin } from '../middlewares/need-signin.middleware.js';

const prisma = new PrismaClient();
const productsRouter = Router();

// 생성
productsRouter.post('', needSignin, async (req, res) => {
  try {
    const { id: userId, name: userName } = res.locals.user;
    const { title, description } = req.body;

    if (!title) {
      return res.status(400).json({
        success: false,
        message: '제목 입력이 필요합니다.',
      });
    }

    if (!description) {
      return res.status(400).json({
        success: false,
        message: '설명 입력이 필요합니다.',
      });
    }

    const product = await prisma.products.create({
      data: { title, description, userId },
    });

    return res.status(201).json({
      success: true,
      message: '상품 생성에 성공했습니다.',
      data: { ...product, userName },
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: '예상치 못한 에러가 발생하였습니다. 관리자에게 문의하세요.',
    });
  }
});

// 목록 조회
productsRouter.get('', async (req, res) => {
  try {
    const { sort } = req.query;
    let upperCaseSort = sort?.toUpperCase();

    if (upperCaseSort !== 'ASC' && upperCaseSort !== 'DESC') {
      upperCaseSort = 'DESC';
    }

    const products = await prisma.products.findMany({
      select: {
        id: true,
        title: true,
        description: true,
        status: true,
        userId: true,
        user: {
          select: { name: true },
        },
        createdAt: true,
        updatedAt: true,
      },
      orderBy: { createdAt: upperCaseSort },
    });

    return res.status(200).json({
      success: true,
      message: '상품 목록 조회에 성공했습니다.',
      data: products, //혹은 products.map((product) => product.toJSON()),
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: '예상치 못한 에러가 발생하였습니다. 관리자에게 문의하세요.',
    });
  }
});

// 상세 조회
productsRouter.get('/:productId', async (req, res) => {
  try {
    const { productId } = req.params;

    const product = await prisma.products.findUnique({
      where: { id: parseInt(productId) },
      select: {
        id: true,
        title: true,
        description: true,
        status: true,
        userId: true,
        user: {
          select: { name: true },
        },
        createdAt: true,
        updatedAt: true,
      },
    });

    return res.status(200).json({
      success: true,
      message: '상품 목록 조회에 성공했습니다.',
      data: product,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: '예상치 못한 에러가 발생하였습니다. 관리자에게 문의하세요.',
    });
  }
});

// 수정
productsRouter.put('/:productId', needSignin, async (req, res) => {
  try {
    const { productId } = req.params;
    const { title, description, status } = req.body;
    const { id: userId, name: userName } = res.locals.user;

    // 수정 정보가 하나도 없는 경우
    if (!title && !description && !status) {
      return res.status(400).json({
        success: false,
        message: '수정 정보는 최소 한 가지 이상이어야 합니다.',
      });
    }

    const isValidStatus = status
      ? status === 'FOR_SALE' || status === 'SOLD_OUT'
      : true;

    if (!isValidStatus) {
      return res.status(400).json({
        success: false,
        message: '지원하지 않는 상태입니다. (status: FOR_SALE | SOLD_OUT)',
      });
    }

    // 일치하는 상품이 존재하지 않는 경우
    const product = await prisma.products.findUnique({
      where: { id: parseInt(productId) },
    }); // 업데이트 할 때 편하게 객체유지

    if (!product) {
      return res.status(404).json({
        success: false,
        message: '상품 조회에 실패했습니다.',
      });
    }

    // 작성자ID와 인증 정보의 사용자ID가 다른 경우
    const isProductOwner = product.userId === userId;
    if (!isProductOwner) {
      return res.status(403).json({
        success: false,
        message: '상품 수정 권한이 없습니다.',
      });
    }

    const updatedProduct = await prisma.products.update({
      where: { id: parseInt(productId) },
      data: {
        ...(title && { title }),
        ...(description && { description }),
        ...(status && { status }),
      },
      select: {
        id: true,
        title: true,
        description: true,
        status: true,
        userId: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    return res.status(200).json({
      success: true,
      message: '상품 수정에 성공했습니다.',
      data: updatedProduct,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: '예상치 못한 에러가 발생하였습니다. 관리자에게 문의하세요.',
    });
  }
});

// 삭제
productsRouter.delete('/:productId', needSignin, async (req, res) => {
  try {
    const { productId } = req.params;
    const { id: userId, name: userName } = res.locals.user;

    // 일치하는 상품이 존재하지 않는 경우
    const product = await prisma.products.findUnique({
      where: { id: parseInt(productId) },
    }); // 업데이트 할 때 편하게 객체유지

    if (!product) {
      return res.status(404).json({
        success: false,
        message: '상품 조회에 실패했습니다.',
      });
    }

    // 작성자ID와 인증 정보의 사용자ID가 다른 경우
    const isProductOwner = product.userId === userId;
    if (!isProductOwner) {
      return res.status(403).json({
        success: false,
        message: '상품 삭제 권한이 없습니다.',
      });
    }

    await prisma.products.delete({
      where: { id: parseInt(productId) },
    });

    const deletedProduct = {
      ...product,
      userName,
    };

    return res.status(200).json({
      success: true,
      message: '상품 삭제에 성공했습니다.',
      data: deletedProduct,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: '예상치 못한 에러가 발생하였습니다. 관리자에게 문의하세요.',
    });
  }
});

export { productsRouter };

---
//user router

import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { needSignin } from '../middlewares/need-signin.middleware.js';

const prisma = new PrismaClient();
const userRouter = Router();

userRouter.get('/me', needSignin, async (req, res, next) => {
  try {
    //const me = res.locals.user;
    const userId = res.locals.user?.id;

    const me = await prisma.users.findUnique({
      // PrismaClient를 사용하여 사용자를 찾습니다.
      where: {
        id: userId,
      },
      select: {
        id: true,
        email: true,
        name: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    return res.status(200).json({
      success: true,
      message: '내 정보 조회에 성공했습니다.',
      data: me,
    });
  } catch (error) {
    next(error);
    // console.error(error);
    // return res.status(500).json({
    //   success: false,
    //   massage: '예상치 못한 에러가 발생했습니다. 관리자에게 문의하세요.',
    // });
  }
});

export { userRouter };
